\documentclass[10pt,twocolumn]{article}
%\VignetteIndexEntry{RcppCNPy-intro}
%\VignetteEngine{highlight::highlight}
%\VignetteKeywords{Python, NumPy, R, data transfer}
%\VignettePackage{RcppCNPy}

\usepackage[authoryear,round,longnamesfirst]{natbib}

\usepackage[bf,sf,compact,small]{titlesec}

\usepackage[margin=1in,paper=letterpaper]{geometry}

%\usepackage[T1]{fontenc}
%\usepackage{pslatex}        % just like RJournal
%\usepackage{palatino,mathpazo}

\usepackage{microtype}                     %% cf http://www.khirevich.com/latex/microtype/
\usepackage[T1]{fontenc}		   %% cf http://www.khirevich.com/latex/font/
\usepackage[bitstream-charter]{mathdesign} %% cf http://www.khirevich.com/latex/font/

\usepackage{color,url,booktabs}

\newcommand{\proglang}[1]{\textsf{#1}}
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\newcommand{\code}[1]{\texttt{#1}}

\newcommand{\R}{\proglang{R}\ } % NB forces a space so not good before % fullstop etc.
\newcommand{\Rns}{\proglang{R}} % without the space
\newcommand{\Cpp}{\proglang{C++}\ }
\newcommand{\Python}{\proglang{Python}\ }

\newcommand{\CRAN}[1]{\url{http://CRAN.R-Project.org/package=#1}}

% somehow the highlight package forgets this one
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}

\newsavebox{\hlbox}
\definecolor{hlBg}{rgb}{0.949019607843137,0.949019607843137,0.949019607843137}
\definecolor{hlBd}{rgb}{0,0,0}
\renewenvironment{Hchunk}{\vspace{0.125em}\noindent\begin{lrbox}{\hlbox}\begin{minipage}[b]{.98\linewidth}}%
    {\end{minipage}\end{lrbox}\fcolorbox{hlBd}{hlBg}{\usebox{\hlbox}}\vspace{0.125em}}


<<echo=FALSE,print=FALSE>>=
prettyVersion <- packageDescription("RcppCNPy")[["Version"]]
prettyDate <- format(Sys.Date(), "%B %e, %Y")
@

\author{Dirk Eddelbuettel}
\title{\pkg{RcppCNPy}: Reading and writing \pkg{NumPy} binary files}
\date{\pkg{RcppCNPy} version \Sexpr{prettyVersion} as of \Sexpr{prettyDate}}

\begin{document}
\maketitle

\abstract{
  \noindent This document introduces the \pkg{RcppCNPy} package for reading
  and writing files created by or for the \pkg{NumPy} module for
  \proglang{Python}.

  \pkg{RcppCNPy} is based on \pkg{cnpy}, a \proglang{C++}
  library written by Carl Rogers.
}

\section{Motivation}

\proglang{Python}\footnote{\url{http://www.python.org}} is a widely-used
programming language. It is deployed for use cases ranging from simple
scripting to larger-scale application development. \Python is also popular
for quantitative and scientific application due to the existence of extension
modules such as \pkg{NumPy}\footnote{\url{http://numpy.scipy.org/}} (which is
shorthand for Numeric Python).

\pkg{NumPy} can be used for $N$-dimensional arrays, and provides an efficient
binary storage model for these files.  In practice, $N$ is often equal to
two, and matrices processed or generated in \Python can be stored in this
form.

\R has no dedicated reading or writing functionality for these files.
However, Carl Rogers has provided a small \Cpp library called
\pkg{cnpy}\footnote{\url{https://github.com/rogersce/cnpy}} which is released
under the MIT license. Using the `Rcpp modules' feature in
%\pkg{Rcpp}\footnote{Eddelbuettel and Fran\c{c}cois, 2011, JSS, 40(8),
%  \url{http://www.jstatsoft.org/v40/i08/}}\footnote{\CRAN{Rcpp}}, we provide
\pkg{Rcpp} \shortcites{CRAN:Rcpp} \citep{Eddelbuettel:2013:Rcpp,CRAN:Rcpp}, we provide
(some) features of this library to \Rns.

\section{Examples}

\subsection{Data creation in \Python}

The first code example simply creates two files in \proglang{Python}: a
two-dimensional rectangular array as well as a vector.

% #!/usr/bin/python

% import numpy as np

% # simple float array
% mat = np.arange(12).reshape(3,4) * 1.1
% mat
% np.save("fmat.npy", mat)

% # simple float vector
% np.save("fvec.npy", np.arange(5) * 1.1)

<<lang=py>>=
>>> import numpy as np
>>>
>>> mat = np.arange(12).reshape(3,4) * 1.1
>>> mat
array([[  0. ,   1.1,   2.2,   3.3],
       [  4.4,   5.5,   6.6,   7.7],
       [  8.8,   9.9,  11. ,  12.1]])
>>> np.save("fmat.npy", mat)
>>>
>>> vec = np.arange(5) * 1.1
>>> vec
array([ 0. ,  1.1,  2.2,  3.3,  4.4])
>>> np.save("fvec.npy", vec)
>>>
@ 

As illustrated, \Python uses the \proglang{Fortran} convention for storing
matrices and higher-dimensional arrays: a matrix constructed from a single
sequence has its first consecutive elements in its first row---whereas \Rns,
following the \proglang{C} convention, has these first few values in its first
column. This shows that to go back and forth we need to transpose these
matrices (which represented internally as two-dimensional arrays).

\subsection{Data reading in \R}

We can read the same data in \R using the \code{npyLoad()} function provided
by the \pkg{RcppCNPy} package:

% R> library(RcppCNPy)
% Loading required package: Rcpp
% R>
% R> mat <- npyLoad("fmat.npy")
% R> mat
%      [,1] [,2] [,3] [,4]
% [1,]  0.0  1.1  2.2  3.3
% [2,]  4.4  5.5  6.6  7.7
% [3,]  8.8  9.9 11.0 12.1
% R>
% R> vec <- npyLoad("fvec.npy")
% R> vec
% [1] 0.0 1.1 2.2 3.3 4.4
% R>

<<print=FALSE,echo=FALSE>>=
library(methods)
library(RcppCNPy)
M <- matrix(0:11, 3, 4, byrow=TRUE) * 1.1
v <- v <- 0:4 * 1.1
npySave("fmat.npy", M)
npySave("fvec.npy", v)
@ 

<<>>=
library(RcppCNPy)

mat <- npyLoad("fmat.npy")
mat

vec <- npyLoad("fvec.npy")
vec
@ 

The \proglang{Fortran}-order of the matrix is preserved; we obtain the exact
same data as we stored.

\subsection{Reading compressed data in \R}

A useful extension to the \pkg{cnpy} is the support of \pkg{gzip}-compressed
data.

<<print=FALSE,echo=FALSE>>=
system("gzip -f fmat.npy")
@ 

<<>>=
mat2 <- npyLoad("fmat.npy.gz")
mat2
@ 

Support for writing compressed files has been added in version 0.2.0.

\subsection{Data writing in \R}

Matrices and vectors can be written to files using the \code{npySave()}
function.

<<>>=
set.seed(42)
m <- matrix(sort(rnorm(6)), 3, 2)
m
npySave("randmat.npy", m)
v <- seq(10, 12)
v
npySave("simplevec.npy", v)
@ 


\subsection{Data reading in \Python}

Reading the data back in \Python is straightforward too:

<<lang=py>>=
>>> m = np.load("randmat.npy")
>>> m
array([[-0.56469817,  0.40426832],
       [-0.10612452,  0.6328626 ],
       [ 0.36312841,  1.37095845]])
>>> 
>>> v = np.load("simplevec.npy")
>>> v
array([ 10.,  11.,  12.])
>>> 
@


\section{Performance}

The \R script \code{timing} in the \code{demo/} directory of package
\pkg{RcppCNPy} provides a simple benchmark.  Given two values $n$ and $k$, a
matrix of size $n \times k$ is created with $n$ rows and $k$ columns. It is
written to temporary files in
% \begin{enumerate}
% \item ascii format using \code{write.table()};
% \item \code{NumPy} format using \code{npySave()}; and
% \item \code{NumPy} format using \code{npySave()} followed by a call to \code{gzip}.
% \end{enumerate}
i) ascii format using \code{write.table()};
ii) \code{NumPy} format using \code{npySave()}; and
iii) \code{NumPy} format using \code{npySave()} with compression via
the \code{zlib} library (used also by \code{gzip}).

Table~\ref{tab:benchmark} shows some timing comparisons for a matrix with
five million elements.  Reading the \code{npy} is clearly fastest as it
required only parsing of the header, followed by a single large binary read
(and the transpose required to translate the representation used by \Rns). The
compressed file requires only one-fourth of the disk space, but takes
approximately 2.5 times as long to read as the binary stream has be
transformed.  Lastly, the default ascii reading mode is clearly by far the
slowest.

\begin{table}[bt]
  \begin{center}
    \begin{small}
      \begin{tabular}{rrr}
        \toprule
        {\bf Access method \phantom{X}} & {\bf Time in sec.} & {\bf Relative to best} \\
        \cmidrule(r){1-3}
     \code{npyLoad(pyfile)}   &    1.95 &  1.00 \\
   \code{npyLoad(pygzfile)}   &    4.92 &  2.53 \\
 \code{read.table(}txtfile)   &  128.85 & 66.24 \\
        \bottomrule
      \end{tabular}
    \end{small}
    \caption{Performance comparison of data reads using a matrix of size
      $10^5 \times 50$. File size are 39.7mb for ascii, 40.0mb for npy and
      10.8mb for npy.gz. Ten replications were performed, and total times
      are shown.}
    \label{tab:benchmark}
  \end{center}
\end{table}



\section{Limitations}

\subsection{Integer support}

Support for integer data types is conditional on use of either the
\code{-std=c++0x} or the newer \code{-std=c++11} compiler extension switches.
Only these newer standard supports the \code{long long int} type needed to
represent \code{int64} data on a 32-bit OS.  Following the release of \R
3.1.0, it has been enabled by default (whereas it previously required a
manual rebuild).

\subsection{Higher-dimensional arrays}

\pkg{Rcpp} supports three-dimensional arrays, this could be support in
\pkg{RcppCNPy} as well.

\subsection{\code{npz} files}

The \pkg{cnpy} library supports reading and writing of sets of arrays; this
feature could also be exported.

\section{Summary}

The \pkg{RcppCNPy} package provides simple reading and writing of \pkg{NumPy}
files, using the \pkg{cnpy} library.
%
Reading of compressed files is also supported as an extension. This offers
users a balance between more compact storage at the prices of slightly longer
read times.

<<print=FALSE,echo=FALSE>>=
unlink("fmat.npy.gz")
unlink("fvec.npy")
unlink("randmat.npy")
unlink("simplevec.npy")
@ 
\bibliographystyle{plainnat}
\bibliography{\Sexpr{Rcpp:::bib()}}

\end{document}

